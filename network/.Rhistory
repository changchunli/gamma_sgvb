head(biogrid)
class(biogrid$a)
as.numeric(biogrid$a[1:20])
d=as.numeric(biogrid$a[1:20])
levels(biogrid$a)[d]
dim(biogrid)
length(levels(com))
length(a)
length(b)
all(levels(a)==levels(b))
a[1:10]
length(unique(as.numeric(a)))
?sparseMatrix
ones(10)
sum(is.na(a))
sum(is.na(b))
sum(is.na(biogrid))
biogrid[ is.na(biogrid$b),]
l=apply(biogrid,1,function(g) any(is.na(g)))
length(l)
sum(l)
dim(ad)
min(c(1,2,3),2)
sum(ad==2)
sum(ad==1)
sum(diag(ad))
rs=apply(ad,1,sum)
?write.table
?writeLines
getwd()
setwd("~/enviro_code/") 
load("aseDetectionNomin.RData") -> a
a
summary( res$p.values )
summary( res$q.values )
sum( res$q.values < .05 ) 
 mean( res$q.values < .05 ) 
 mean( res$q.values < .1 ) 
 mean( res$q.values < .01 ) 
 mean( res$q.values < .001 ) 
sum( res$p.values==0)
a=list()
a[[1]]=c()
a
c()
a[[1]]=numeric(0)
a
toupper
?toupper
a[1:10]
a[1:100]
a[200:300]
a[500:600]
length(unique(a))
length(unique(toupper(a)))
?grep
grep(a,"*Rik")
grep("*Rik",a)
grep("*Rik",a)
a[grep("AN*.*",a)]
a[grep("$AN[0-9]+.2",a)]
a[grep("AN[0-9]+.2",a)]
a[grep(,a)]
a[grep("At[0-9]+g[0-9]+",a)]
a[grep("B[0-9]+\.[0-9]+",a)]
a[grep("B[0-9]+.[0-9]+",a)]
a[grep("B[0-9]+\\.[0-9]+",a)]
a[grep("^B[0-9]+\\.[0-9]+",a)]
a[grep("C[0-9]+[A-Z][0-9]+\\.[0-9]+",a)]
bi=as.numeric(b)
toRemove
length(a)
sum(toKeep)
mean(toKeep)
sum(!toKeep)
length(unique(a[!toKeep]))
length(unique(a[toKeep]))
length(unique(a))
length(unique(a))
getwd()
load("eQTLs.RData") 
load("eQTLs.RData") -> a
a
dim(pvals)
pvals[[1]]
a=com[1:length(a)]
length(q)
load("aseDetectionNomin.RData") 
load("aseDetectionNomin.RData")  -> a
a
summary( res$p.values )
sum( res$p.values < .05 )
mean( res$p.values < .05 )
mean( res$p.values < .01 )
mean( res$q.values < .05 )
mean( res$q.values < .1 )
mean( res$q.values < .05 )
require(qvalue)
install.packages('qvalue') 
source("http://bioconductor.org/biocLite.R")
biocLite("qvalue")
a
require(qvalue)
?qvalue
hist(res$p.values)
require(doMC)
results=foreach(gni=1:length(genesToTest)) %dopar% {
    gn=genesToTest[gni]
    cat(gn,":",gni," out of ",length(genesToTest),"\n")
    ind=which(tss$geneName==gn)[1]
    chr=tss$chr[ ind ]
    ts=tss$tss[ ind ]
    cisSnps=which(snpInfo$chrom==chr & (abs( ts - snpInfo$pos )<1e5))
    cat("num cis SNPs:",length(cisSnps),"\n")
    resdf=matrix(NA,length(cisSnps),4)
    for (cisSnpIndex in seq_len(length(cisSnps))){
        cisSnp=cisSnps[cisSnpIndex]
        snpData=as.numeric(t(genotype[cisSnp,]))
        l=lm( geNorm[,gn] ~ snpData )
        sl=summary(l)
        sp=cor.test(ge[,gn],snpData,method="spearman")
        resdf[cisSnpIndex,]=c(sl$coefficients[2,4],sl$coefficients[2,1],spearmanP=sp$p.value,spearmanRho=sp$estimate)
    }
    cat("pval:",min(pvals[[gn]],na.rm=T)*sum(pvals[[gn]],na.rm=T),"\n")
    resdf
}
load("combined_environment.RData") 
results.dir
to.test.index
    for (to.test.index in 1:30){
        cat(to.test.index,"\n")
        load(paste0("/scail/scratch/u/davidknowles/enviro_code/min_fixed/",to.test[to.test.index],"_results.RData"))
        l=load(paste(results.dir,to.test[to.test.index],".RData",sep=""))
        allpvalues[ unlist(original.index), to.test.index ] = pvals
        allpermpvalues[ unlist(original.index), to.test.index ] = permPvals
    }
l
load("eQTLs3.RData") -> a
a
dim(results)
length(results) 
hist( unlist(lapply(FUN=nrow,results)))
geneNames
length(geneNames)
genesToTest=intersect( as.character(tss$geneName), colnames(ge))
ge=ge[rownames(confounders),]
load("genotype.RData")
ge=ge[rownames(confounders),]
genesToTest=intersect( as.character(tss$geneName), colnames(ge))
load("tss.RData")
genesToTest=intersect( as.character(tss$geneName), colnames(ge))
length(genesToTest)
quit()
y
colnames(rawCounts)
rownames(rawCounts)
load("genotype.RData")
dir()
setwd('~/enviro_code/')
load("genotype.RData")
load("genotype.RData")->a
a
dim(genotype)
colnames(genotype
)
colnames(genotype)[1:10]
all(colnames(genotype)==rownames(rawCounts))
ncol(genotype)
nrow(rawCounts)
load("transData.RData")
dim(transData)
dim(rawCounts)
all(rownames(rawCounts)==rownames(transData))
all(rownames(rawCounts)==rownames(confounders))
load("confounders.RData") 
all(rownames(rawCounts)==rownames(confounders))
dim(ge)
warnings()
snpData
length(cisSnps)
resdf
sd(ge[,gn])
ge[,gn]
sl
 cor.test(ge[,gn],snpData)
0.00446256^2
names(sl
)
sl$r.squared
cor(ge[,gn],snpData)
snpData
table(snpData)
snpData
a=load("cisData.RData")
a
dim(cisData)
rownames(cisData)
colnames(cisData)
dim(ge)
ge[1:10,1:10]
dim(rawCounts)
 rawCounts[1:10,1:10]
cisData[1:10,1:10]
 transData[1:10,1:10]
save(file="~/Dropbox/geForEilon.RData",cisData,transData,rawCounts)
load("locusinfo.RData") 
locusinfo[1:10,1:10]
load("ase.RData") -> a
a
length(ase.subjects)
ase.subjects
dim(het)
dim(as.matrix(het))
dim(het)
rownames(het)
dim(snpInfo)
snpInfo[1:20,]
dim(genotype)
dim(het)
ase.subjects
snpInfo[1:20,]
class(snpData)
class(snpInfo)
locusinfo[1:20,1:20]
dim(het)
dim(het)
het(alt)
 dim(alt)
dim(ref)
ct=cor.test(runif(10),runif(10),method="spearman")
ct
names(ct)
ct$p.value
ct$p.value
ct$estimate
load("~/scailscratch/enviro_code/min_fixed/Ace_Inhibitor_results.RData") -> a
a
res$res.full$rep.slope[[1]]
res$res.full$rep.slope[[2]]
res$res.full$rep.slope[1]
res$res.full$coeffs[[1]]
res$p.values[1:10]
length(res$p.values)
length(cisSnps)
cisSnps
valid
sum(valid)
sum(valid,na.rm=T)
a>3
a
r>3
r
het[,snpIndex]==1
het[,snpIndex]
resdf
valid
sum(valid,na.rm=T)
a
b
r
het[,snpIndex]==1
min(a/(a+r))
a/(a+r)
a/(a+r)
warnings()
resdf
snpData[1:10,1:10]
genotype[1:10,1:10]
resdf
source("aseQTLs.R")
 names
names(exp)
names(exps)
?qvalue
pm[on[1:100] ]
qvalue( pm[on[1:100] ] )
max(pm,1)
overlap
p1
qvalue( pm[on[1:100] ] )
p1
p1
pn[on[1:100]]
pn[on[1:100] ]
length(pvals)
p1
p1
p1
p1
wideScreen()
p1
p1noNA
dim(p1)
q=qvalue( pvals[[13]] )
p=pvals[[13]]
p=p[!is.na(p)]
q=qvalue( pvals[[13]] )
q=qvalue( p )
p[p>1]=1
q=qvalue( p )
q
q$pi0
names(q)
min(q$qvalues)
sort(q$qvalues)[1:20]
sum(q$qvalues<0.1)
names(pvals)
lessThanp1
lessThanp1
lessThanp1
names(lessThanp1)
lessThanp1
t(as.matrix(lessThanp1))
 as.matrix(lessThanp1)
 as.matrix(lessThanp1)
lessThanp1
getwd()
setwd("~/enviro_code/") 
x.full[[1]]
x[[1]]
x[[2]]
x[[3]]
x[[4]]
x[[5]]
length(x)
to.test
load("combined_environment.RData") 
num.genes
x[[1]]
log2
}
aseEffects
}
aseEffects[1:100]
snpIsHet
r
aseEffects[1:100]
summary(aseEffects)
n.list[[i]]
rbinom(size=30,prob = .1,n=1)
rbinom(size=30,prob = c(.1,.9),n=1)
rbinom(size=30,prob = c(.1,.8),n=1)
rbinom(size=c(30,30),prob = c(.1,.8),n=1)
rbinom(size=c(30,30),prob=c(.1,.99),n=c(1,1))
xoxo
dev.off()
dev.off()
dev.off()
